{"version":3,"sources":["Header.js","firebase.js","TinderCards.js","SwapeButtons.js","Chat.js","Chats.js","ChatScreen.js","App.js","serviceWorker.js","index.js"],"names":["Header","backButton","history","useHistory","className","IconButton","onClick","replace","fontSize","to","src","alt","database","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","TinderCards","useState","people","setPeople","useEffect","unsubscribe","collection","onSnapshot","snapshot","docs","map","doc","data","person","key","name","preventSwipe","style","backgroundImage","url","SwapeButtons","Chat","message","profilePic","timestamp","Avatar","Chats","ChatScreen","input","setInput","image","messages","setMessages","value","onChange","e","target","placeholder","type","preventDefailt","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.f18b3cb3.chunk.js","sourcesContent":["import React from 'react';\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport ForumIcon from \"@material-ui/icons/Forum\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\n\nimport { Link, useHistory } from 'react-router-dom';\n\nimport \"./Header.css\";\n\n\nfunction Header({ backButton }) {\n    const history = useHistory();\n    return (\n        <div className=\"header\">\n            {backButton ? (\n                <IconButton onClick={()=> history.replace(backButton)}>\n                    <ArrowBackIosIcon className=\"header_icon\" fontSize=\"large\" />\n                </IconButton>\n            ) : (\n                    <IconButton>\n                        <PersonIcon className=\"header_icon\" fontSize=\"large\" />\n                    </IconButton>\n                )}\n\n            <Link to=\"/\">\n                <img\n                    className=\"header_logo\"\n                    src=\"https://cdn.dribbble.com/users/4342926/screenshots/9021406/loveapp.png\"\n                    alt=\"Dating Logo\" />\n            </Link>\n            <Link to=\"/chat\">\n                <IconButton>\n                    <ForumIcon className=\"header_icon\" fontSize=\"large\" />\n                </IconButton></Link>\n        </div>\n    )\n}\n\nexport default Header;","import firebase from \"firebase\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBlxRHoWnEjDzqz2dvr230R39e4dQP-3tM\",\n    authDomain: \"tinder-test-c0b7a.firebaseapp.com\",\n    databaseURL: \"https://tinder-test-c0b7a.firebaseio.com\",\n    projectId: \"tinder-test-c0b7a\",\n    storageBucket: \"tinder-test-c0b7a.appspot.com\",\n    messagingSenderId: \"167395687962\",\n    appId: \"1:167395687962:web:17b75135739eafd5e09ba3\",\n    measurementId: \"G-V9V85YMCBR\"\n  };\n  \n  const firebaseApp = firebase.initializeApp(firebaseConfig);\n\n  const database = firebaseApp.firestore();\n\n  export default database; ","import React, { useState, useEffect } from 'react';\nimport TinderCard from 'react-tinder-card';\nimport database from './firebase';\nimport './TinderCards.css'\n\n\n\nfunction TinderCards() {\n\n    const [people, setPeople] = useState([]);\n\n    useEffect(() => {\n        const unsubscribe = database\n            .collection('people')\n            .onSnapshot(snapshot => \n                setPeople(snapshot.docs.map(doc => doc.data()))\n            );\n            return () => {\n                unsubscribe();\n            };\n    }, []);\n\n    return (\n        <div>\n            <div className=\"tinderCards_cardContainter\">\n                {people.map(person => (\n                    <TinderCard\n                        className=\"swape\"\n                        key={person.name}\n                        preventSwipe={['up', 'down']}\n                    // preventSwipe={['left','right']}\n                    >\n                        <div\n                            style={{ backgroundImage: `url(${person.url})` }}\n                            className=\"card\">\n                            <h3>{person.name}</h3>\n                        </div>\n                    </TinderCard>\n                ))}\n            </div>\n\n        </div>\n    )\n}\n\nexport default TinderCards;","import React from 'react';\n\nimport ReplayIcon from \"@material-ui/icons/Replay\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport StarRateIcon from \"@material-ui/icons/StarRate\";\nimport FavouriteIcon from \"@material-ui/icons/Favorite\";\nimport FlashOnIcon from \"@material-ui/icons/FlashOn\";\nimport IconButton from \"@material-ui/core/IconButton\";\n\nimport \"./SwapButtons.css\";\n\n\n\n\nfunction SwapeButtons() {\n    return (\n        <div className=\"SwapButtons\">\n            <IconButton className=\"SwapButtons_repeat\">\n                <ReplayIcon fontSize=\"large\" />\n            </IconButton>\n            <IconButton className=\"SwapButtons_left\">\n                <CloseIcon fontSize=\"large\" />\n            </IconButton>\n            <IconButton className=\"SwapButtons_start\">\n                <StarRateIcon fontSize=\"large\" />\n            </IconButton>\n            <IconButton className=\"SwapButtons_right\">\n                <FavouriteIcon fontSize=\"large\" />\n            </IconButton>\n            <IconButton className=\"SwapButtons_lightning\">\n                <FlashOnIcon fontSize=\"large\" />\n            </IconButton>\n\n        </div>\n    )\n}\n\nexport default SwapeButtons;","import React from 'react';\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { Link } from 'react-router-dom';\n\n// import ChatScreen from \"./ChatScreen\";\nimport \"./Chat.css\";\n\n\nfunction Chat({ name, message, profilePic, timestamp }) {\n    return (\n        <Link to={`/chat/${name}`}>\n            <div className=\"chat\">\n                <Avatar className=\"chat_image\" alt={name} src={profilePic} />\n                <div className=\"chat_details\">\n                    <h2>{name}</h2>\n                    <p>{message}</p>\n                </div>\n                <p className=\"chat_timestamp\">{timestamp}</p>\n            </div>\n        </Link>\n    )\n}\n\nexport default Chat;","import React from 'react';\nimport Chat from \"./Chat\";\n// import \"./Chats.css\";\n\n\nfunction Chats() {\n    return (\n        <div className=\"chats\">\n            <Chat\n                name=\"Susant\"\n                message=\"Yoo \"\n                timestamp=\"40 sec ago\"\n                profilePic=\"https://resize.indiatvnews.com/en/resize/newbucket/715_-/2020/06/pjimage-13-1592141699.jpg\"\n            />\n            <Chat\n                name=\"Susant\"\n                message=\"Yoo \"\n                timestamp=\"40 sec ago\"\n                profilePic=\"https://resize.indiatvnews.com/en/resize/newbucket/715_-/2020/06/pjimage-13-1592141699.jpg\"\n            />\n            <Chat\n                name=\"Susant\"\n                message=\"Yoo \"\n                timestamp=\"40 sec ago\"\n                profilePic=\"https://resize.indiatvnews.com/en/resize/newbucket/715_-/2020/06/pjimage-13-1592141699.jpg\"\n            />\n            <Chat\n                name=\"Susant\"\n                message=\"Yoo \"\n                timestamp=\"40 sec ago\"\n                profilePic=\"https://resize.indiatvnews.com/en/resize/newbucket/715_-/2020/06/pjimage-13-1592141699.jpg\"\n            />\n        </div>\n    )\n}\n\nexport default Chats;","import React, { useState } from 'react';\nimport \"./ChatScreen.css\";\nimport { Avatar } from '@material-ui/core';\n\n\nfunction ChatScreen() {\n    const [input, setInput] = useState('')\n    const [messages, setMessages] = useState([\n        {\n            name: \"Susant\",\n            image: 'https://resize.indiatvnews.com/en/resize/newbucket/715_-/2020/06/pjimage-13-1592141699.jpg',\n            messages: 'Whts up <3'\n        },\n        {\n            name: \"Susant\",\n            image: 'https://resize.indiatvnews.com/en/resize/newbucket/715_-/2020/06/pjimage-13-1592141699.jpg',\n            messages: ' How\\'s going'\n        },\n        {\n\n            messages: 'Love You! :)'\n        }\n    ]);\n     const handleSned = e => {\n         e.preventDefailt();\n         setMessages([...messages, {messages: input }]);\n         setInput(\"\");\n     }\n\n    return (\n        <div className=\"chatScreen\">\n            <p className=\"chatScreen_timestamp\">\n                you matched with her on 04/08/20\n            </p>\n            {messages.map(message => (\n                message.name ? (\n                    <div className=\"chatScreen_message\">\n                        <Avatar\n                            className=\"chatScreen_image\"\n                            alt={message.name}\n                            src={message.image}\n                        />\n                        <p className=\"chatScreen_text\">{message.messages}</p>\n                    </div>\n                ) : (\n                        <div className=\"chatScreen_message\">\n                            <p className=\"chatScreen_textUser\">{message.messages}</p>\n                        </div>\n                    )\n            ))}\n            <div>\n                <form className=\"chatScreen_input\">\n                    <input\n                        value={input}\n                        onChange={e => setInput(e.target.value)}\n                        className=\"chatScreen_inputField\"\n                        placeholder=\"Type a message...\"\n                        type=\"text\" />\n                    <button onClick={handleSned} className=\"chatScreen_inputButton\">SEND</button>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default ChatScreen;","/* eslint-disable jsx-a11y/accessible-emoji */\nimport React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Header from './Header';\nimport TinderCards from './TinderCards';\nimport SwapeButtons from './SwapeButtons';\nimport Chats from \"./Chats\";\nimport ChatScreen from \"./ChatScreen\";\n\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n\n        <Switch>\n        <Route path=\"/chat/:person\">\n            <Header backButton=\"/chat\" />\n            <ChatScreen />\n          </Route>\n          <Route path=\"/chat\">\n            <Header backButton=\"/\" />\n            <Chats />\n          </Route>\n          <Route path=\"/\">\n            <Header />\n            <TinderCards />\n            <SwapeButtons />\n          </Route>\n\n        </Switch>\n\n\n      </Router>\n\n    </div>\n  );\n}\n\nexport default App;\n\n//  {/*Header */}\n\n\n//       {/* Tinder Cards */}\n\n//       {/* Buttons Below tinder cards */}\n\n//       {/* Chats Screen*/}\n//       {/* Individual Chat Screen */}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}